struct BigNum{
	int num[305];
	int size;
	bool signal;
	void operator=(const BigNum&a);
	void operator=(const int&a);
	void operator=(const string&c);
	bool operator==(const BigNum&a);
	bool operator>(const BigNum&a);
	bool operator<(const BigNum&a);
	bool operator>=(const BigNum&a);
	bool operator<=(const BigNum&a);
	BigNum operator+(const BigNum&a);
	BigNum operator-(const BigNum&a);
	BigNum operator*(const BigNum&a);
	BigNum operator/(const BigNum&a);
	BigNum operator%(const BigNum&a);
	BigNum(){
		memset(num,0,sizeof(num));
		size=0;
		signal=1;
	}
};

void check(BigNum&a){
	for(int i=304;i>=ps;--i){//确定现有长度
		if(a.num[i]!=0){
			a.size=i-ps+1;
			break;
		}
	}
	if((a.num[a.size+ps-1]>0)^a.signal)//确定符号
		a.signal=!a.signal;
	for(int i=ps;i<a.size+ps;++i){//进退位
		if(a.signal){//如果是正数就全刷为正个位数
			if(a.num[i]>9){
				a.num[i]-=10;
				a.num[i+1]++;
				--i;
				continue;
			}
			if(a.num[i]<0){
				a.num[i]+=10;
				a.num[i+1]--;
				--i;
				continue;
			}
		}
		else{//如果是负数就全刷成负个位数
			if(a.num[i]>0){
				a.num[i]-=10;
				a.num[i+1]++;
				--i;
				continue;
			}
			if(a.num[i]<-9){
				a.num[i]+=10;
				a.num[i+1]--;
				--i;
				continue;
			}
		}
	}
	for(int i=304;i>=ps;--i){//确定现在的长度
		if(a.num[i]!=0){
			a.size=i-ps+1;
			break;
		}
	}
	if(a.size==0){
		a.size=1;
		a.signal=1;
	}
}
BigNum extract(BigNum&a,int b){
	BigNum c;
	int d=ps;
	for(int i=b;i<a.size+ps;++i){
		c.num[d]=a.num[i];
		++d;
	}
	check(c);
	return c;
}
void BigNum::operator=(const BigNum&a){
	memset(num,0,sizeof(num));
	for(int i=0;i<a.size;++i){
		num[i+ps]=a.num[i+ps];
	}
	check(*this);
}
void BigNum::operator=(const int&a){
	memset(num,0,sizeof(num));
	int z=ps+9;
	int x=a;
	for(int i=1000000000;i!=0;i/=10){
		num[z]=x/i;
		x%=i;
		--z;
	}
	check(*this);
}
void BigNum::operator=(const string&c){
	memset(num,0,sizeof(num));
	for(unsigned int i=0;i<c.size()-1;++i){//变成高精度数字
		num[ps+i]=c[c.size()-i-1]-t0;
	}
	if(c[0]=='-'){//如果第一个字符是负号，就是负数
		size=c.size()-1;
		for(int i=0;i<size;++i){
			num[ps+i]=-num[ps+i];
		}
		signal=0;
	}
	else if(c[0]=='+'){//如果第一个字符是正号，就是正数
		size=c.size()-1;
		signal=1;
	}
	else{//如果第一个字符是数字，也是正数
		size=c.size();
		num[size-1+ps]=c[0]-t0;
		signal=1;
	}
}
void output(BigNum&a){//输出高精度数字
	if(a.signal==0){
		cout<<"-";
	}
	for(int i=ps+a.size-1;i>=ps;--i){
		cout<<abs(a.num[i]);
	}
	cout<<endl;
}
bool BigNum::operator==(const BigNum&a){
	if(size!=a.size)
		return 0;
	else if(signal^a.signal)
		return 0;
	else{
		for(int i=ps;i<size+ps;++i){
			if(num[i]!=a.num[i])
				return 0;
		}
	}
	return 1;
}
bool BigNum::operator>(const BigNum&a){
	if(signal^a.signal){//如果异号
		return signal;
	}
	else if(size!=a.size){
			return !(size>a.size)^signal;
	}
	else{
		for(int i=size-1+ps;i>=ps;--i){
			if(num[i]<a.num[i]){
				return 0;
			}
			else if(num[i]>a.num[i]){
				return 1;
			}
		}
		return 0;
	}
}
bool BigNum::operator>=(const BigNum&a){
	if(signal^a.signal){//如果异号
		return signal;
	}
	else if(size!=a.size){
			return !(size>a.size)^signal;
	}
	else{
		for(int i=size-1+ps;i>=ps;--i){
			if(num[i]<a.num[i]){
				return 0;
			}
			else if(num[i]>a.num[i]){
				return 1;
			}
		}
		return 1;
	}
}
bool BigNum::operator<(const BigNum&a){
	if(signal^a.signal){
		return !signal;
	}
	else if(size!=a.size){
		return ((size>a.size)^signal);
	}
	else{
		for(int i=size-1+ps;i>=ps;--i){
			if(num[i]<a.num[i]){
				return 1;
			}
			else if(num[i]>a.num[i]){
				return 0;
			}
		}
		return 0;
	}
}
bool BigNum::operator<=(const BigNum&a){
	if(signal^a.signal){
		return !signal;
	}
	else if(size!=a.size){
		return ((size>a.size)^signal);
	}
	else{
		for(int i=size-1+ps;i>=ps;--i){
			if(num[i]<a.num[i]){
				return 1;
			}
			else if(num[i]>a.num[i]){
				return 0;
			}
		}
		return 1;
	}
}
BigNum BigNum::operator+(const BigNum&a){
	BigNum b;
	b.size=max(a.size,size)+1;
	for(int i=ps;i<=b.size+ps;++i){
		b.num[i]=num[i]+a.num[i];
	}
	check(b);
	return b;
}
BigNum BigNum::operator-(const BigNum&a){
	BigNum b;
	b.size=max(a.size,size)+1;
	for(int i=ps;i<=b.size+ps;++i){
		b.num[i]=num[i]-a.num[i];
	}
	check(b);
	return b;
}
BigNum BigNum::operator*(const BigNum&a){
	BigNum b;
	for(int i=ps;i<size+ps;++i){
		for(int j=ps;j<size+a.size+ps-1;++j){
			b.num[j]+=num[i]*a.num[j-i+ps];
		}
	}
	check(b);
	return b; 
}
BigNum BigNum::operator/(const BigNum&a){
	BigNum b;
	BigNum c;
	c=*this;
	for(int i=size-a.size+ps;i>=ps;i--){
		BigNum d=extract(c,i);
		BigNum e,f;
		if(signal){
			if(a.signal){
				for(int j=0;j<=9;++j){
					e=j;
					f=j+1;
					if(((e*a)>d)^((f*a)>d)){
						b.num[i]=j;
						for(int z=ps;z<a.size+ps;++z){
							c.num[z+i-ps]-=a.num[z]*j;
						}
						check(c);
						break;
					}
				}
			}
			else{
				for(int j=0;j>=-9;--j){
					e=j;
					f=j-1;
					if(((e*a)>d)^((f*a)>d)){
						b.num[i]=j;
						for(int z=ps;z<a.size+ps;++z){
							c.num[z+i-ps]-=a.num[z]*j;
						}
						check(c);
						break;
					}
				}
			}
		}
		else{
			if(a.signal){
				for(int j=0;j>=-9;--j){
					e=j;
					f=j-1;
					if(((e*a)<d)^((f*a)<d)){
						b.num[i]=j;
						for(int z=ps;z<a.size+ps;++z){
							c.num[z+i-ps]-=a.num[z]*j;
						}
						check(c);
						break;
					}
				}
			}
			else{
				for(int j=0;j<=9;++j){
					e=j;
					f=j+1;
					if(((e*a)<d)^((f*a)<d)){
						b.num[i]=j;
						for(int z=ps;z<a.size+ps;++z){
							c.num[z+i-ps]-=a.num[z]*j;
						}
						check(c);
						break;
					}
				}
			}
		}
	}
	check(b);
	return b;
}
BigNum BigNum::operator%(const BigNum&a){
	BigNum b=(*this/a);
	b=(b*a);
	b=(*this-b);
	return b;
}
